---

- include_tasks: 'data_write.yml'
  vars:
    key:   '{{ iargs.key   }}'
    type:  '{{ iargs.type  }}'
    value: '{{ iargs.value|combine({"depends_on":[]}) }}'
  when: '"d" in iay_fields[iargs.type]'

- include_tasks: 'terraform_write.yml'
  vars:
    file: 'local.{{ iargs.type }}.{{ iargs.key }}'
    irepl: '{{ iargs.type }}_{{ iargs.key }}_'
    keys: '{{ iargs.value.keys()
              |map("regex_replace","^",irepl)
              |list }}'
    locals: '{{ dict(keys|zip(iargs.value.values()))
                |combine({ "place": "holder" }) }}'
    terraform:
      locals: '{{ locals }}'

- name: 'Write output.{{ n }}.tf.json file.'
  copy:
    content: '{{ yaml|to_nice_json }}'
    dest: '{{ path }}/output.{{ n }}.tf.json'
  vars:
    yaml:
      output: '{{ { o: { "value" : iargs.id } } }}'

- name: 'Create import files.'
  shell: 'echo + mv {{ file }}.bak {{ file }} >>terraform.log'
  args:
    chdir: '{{ path }}'
    removes: '{{ file }}'
  loop:
    - 'data'
    - 'local'
    - 'output'
  vars:
    file: '{{ item }}.{{ n }}.tf.json'

- name: 'terraform refresh'
  shell: '( set -x ; terraform refresh -no-color ) 2>&1 | tee -a terraform.log'
  args:
    chdir: '{{ path }}'
  ignore_errors: true
  register: 'refresh'

- name: 'Rename import files.'
  shell: '( set -x ; mv {{ file }} {{ file }}.bak ) >>terraform.log 2>&1'
  args:
    chdir: '{{ path }}'
    removes: '{{ file }}'
  loop:
    - 'data'
    - 'local'
    - 'output'
  vars:
    file: '{{ item }}.{{ n }}.tf.json'
    
- block:

    - name: 'terraform import {{ n }} {{ i }}'
      shell: '( set -x ;
                sh -c "while terraform state list | grep -q {{ n }} ;
                do terraform state rm {{ n }} ; done" ;
                terraform import -no-color {{ n }} {{ i }} )
                >>terraform.log 2>&1'
      args:
        chdir: '{{ path }}'
      failed_when: false
      ignore_errors: true
      register: 'result'

  vars:
    i: '{{ refresh.stdout_lines
          |map("regex_search","^" + o + " = .*")
          |reject("none")
          |map("regex_replace","^" + o + " = ","")
          |list
          |first
          |default("")
          |trim }}'
  when: 'i|length > 0'
