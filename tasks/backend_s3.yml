---

- block:
    - block:

        - include_tasks: 'datatype_add.yml'
          loop: '{{ s3_data|dict2items }}'
          loop_control:
            loop_var: 'd'
          vars:
            datas: '{{ d.value }}'
            type: '{{ provider }}_{{ d.key }}'

        - include_tasks: 'resourcegroup_add.yml'
          loop: '{{ s3_resource }}'
          loop_control:
            loop_var: 'group'

        - name: 'Enforce force_destroy on bucket.'
          include_tasks: 'terraform_apply.yml'
          vars:
            action: 'apply'
          when: 'iay_action == "destroy"'

        - include_tasks: 'terraform_apply.yml'
          vars:
            action: '{{ iay_action }}'
          
        - include_tasks: 'datatype_del.yml'
          loop: '{{ s3_data|dict2items }}'
          loop_control:
            loop_var: 'd'
          vars:
            datas: '{{ d.value }}'
            type: '{{ provider }}_{{ d.key }}'

        - include_tasks: 'resourcegroup_del.yml'
          loop: '{{ s3_resource }}'
          loop_control:
            loop_var: 'group'

      vars:
        s3_data:
          iam_policy_document:
            backend:
              statement:
                - '{{ account|combine(allow, bucket,
                                      {"actions":list}) }}'
                - '{{ account|combine(allow, file,
                                      {"actions":read|union(write)}) }}'
                - '{{ account|combine(deny,  file,
                                      {"actions":write},
                                      {"condition":crypt|combine(is_null)}) }}'
                - '{{ account|combine(deny,  file,
                                      {"actions":write},
                                      {"condition":crypt|combine(not_aes)}) }}'
        s3_resource:
          - kms_alias:
              backend:
                name: 'alias/{{ backend.head }}'
                target_key_id: '${aws_kms_key.backend.id}'
          - dynamodb_table:
              backend:
                attribute:
                  name: 'LockID'
                  type: 'S'
                hash_key: 'LockID'
                name: '{{ backend.head }}'
                read_capacity: 50
                write_capacity: 50
            kms_key:
              backend:
                description: 'Encryption key for {{ backend.full }}'
                id: '${aws_kms_alias.backend.target_key_id}'
            s3_bucket:
              backend:
                acl: 'private'
                bucket: '{{ backend.head }}'
                encrypt: true
                force_destroy: true
                lifecycle_rule:
                  abort_incomplete_multipart_upload_days: 1
                  enabled: true
                noncurrent_version_expiration:
                  days: '{{ iay_backend_expire }}'
                policy: '${data.aws_iam_policy_document.backend.json}'
                server_side_encryption_configuration:
                  rule:
                    apply_server_side_encryption_by_default:
                      kms_master_key_id: '${aws_kms_key.backend.arn}'
                      sse_algorithm: 'aws:kms'
                versioning:
                  enabled: true
  vars:
    account:
      principals:
        identifiers:
          - 'arn:aws:iam::{{ aws_account }}:root'
        type: 'AWS'
    allow:
      effect: 'Allow'
    bucket:
      resources:
        - 'arn:aws:s3:::{{ backend.head }}'
    crypt:
      variable: 's3:x-amz-server-side-encryption'
    deny:
      effect: 'Deny'
    file:
      resources:
        - 'arn:aws:s3:::{{ backend.full }}'
    is_null:
      test: 'Null'
      values:
        - 'true'
    list:
      - 's3:ListBucket'
    not_aes:
      test: 'StringNotEquals'
      values:
        - 'AES256'
    read:
      - 's3:GetObject'
    write:
      - 's3:PutObject'

- block:

    - include_tasks: 'terraform_write.yml'
      vars:
        file: '{{ provider }}_s3_backend'
        terraform:
          terraform:
            backend:
              s3:
                bucket: '{{ backend.head }}'
                dynamodb_table: '{{ backend.head }}'
                key: '{{ backend.tail }}'
                region: '{{ p.value.region|default(aws_region) }}'
    
    - name: 'Remove old state files.'
      file:
        path: '{{ item }}'
        state: 'absent'
      loop: '{{ lookup("fileglob", path + "/terraform.tfstate*", wantlist=true) }}'

    - name: 'Re-initialize terraform.'
      shell: 'terraform init'
      args:
        chdir: '{{ path }}'

  when: 'iay_action == "apply"'
